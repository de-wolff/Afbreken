#include "Letter.h"
#include "Koppen.h"

namespace Afbreken
{


  Koppen::Koppen():_Ordered(_Comparer)
  {

    for (int i = 0; i < KOPPEN_SIZE ; i++)
      {
        Koppen_e e = (Koppen_e)i;
        vector<Letter> l = _Value[i];
        pair<vector<Letter> , Koppen_e>p(l,e);
        _Ordered.insert(p);
      }
  }

Koppen_e Koppen::Find(const vector<Letter> &wd, bool &ok)
{
  map<vector<Letter>, Koppen_e, VectorComparer<Letter, EnumComparer<Letter> > >::iterator i = _Ordered.find(wd);
  ok = (i != _Ordered.end());
  if (ok)
    {
      return i->second;
    }
  return (Koppen_e)0;
}

vector<Letter>  Koppen::_Value[KOPPEN_SIZE] = {
  { _b },
  { _b, _l },
  { _b, _r},
  { _c },
  { _c, _l},
  { _c, _r },
  { _d },
  { _d, _h },
  { _d, _r },
  { _d, _w },
  { _f },
  { _f, _l },
  { _f, _n },
  { _f, _r },
  { _g },
  { _g, _l },
  { _g, _n },
  { _g, _r },
  { _h },
  { _j },
  { _k },
  { _k, _j },
  { _k, _l },
  { _k, _n },
  { _k, _r},
  { _k, _w },
  { _l },
  { _m },
  { _n },
  { _p },
  { _p, _h },
  { _p, _j },
  { _p, _l },
  { _p, _r },
  { _p, _s },
  { _q, _u},
  { _r },
  { _r, _h },
  { _s },
  { _s, _c },
  { _s, _c, _l },
  { _s, _c, _r },
  { _s, _f },
  { _s, _h },
  { _s, _h, _r },
  { _s, _j },
  { _s, _j, _t },
  { _s, _k },
  { _s, _l },
  { _s, _m },
  { _s, _n },
  { _s, _p },
  { _s, _p, _l },
  { _s, _p, _r },
  { _s, _q, _u },
  { _s, _t },
  { _s, _t, _h },
  { _s, _t, _r },
  { _s, _w },
  { _s, _ch },
  { _s, _ch, _l },
  { _s, _ch, _m },
  { _s, _ch, _n },
  { _s, _ch, _r },
  { _s, _ch, _w },
  { _t },
  { _t, _h },
  { _t, _h, _r },
  { _t, _j },
  { _t, _m },
  { _t, _r },
  { _t, _s },
  { _t, _s, _j },
  { _t, _w },
  { _v },
  { _v, _l },
  { _v, _r },
  { _w },
  { _w, _h },
  { _w, _r },
  { _x },
  { _z },
  { _z, _w },
  { _ch },
  { _ch, _l },
  { _ch, _r }
};

const  basischeck KoppenBoom[204] = {
  { -2, 0 },
  { -3, 1 },
  { -1, 2 },
  { -5, 3 },
  { -6, 4 },
  { -4, 5 },
  { -8, 6 },
  { -9, 7 },
  { -10, 8 },
  { -12, 9 },
  { -7, 10 },
  { -13, 11 },
  { -14, 12 },
  { -11, 13 },
  { 0, 2 },
  { -16, 15 },
  { -17, 16 },
  { 3, 5 },
  { 6, 10 },
  { -18, 19 },
  { 1, 2 },
  { -19, 21 },
  { -15, 22 },
  { 4, 5 },
  { -20, 24 },
  { 9, 13 },
  { -22, 26 },
  { 11, 13 },
  { 7, 10 },
  { -23, 29 },
  { -24, 30 },
  { 12, 13 },
  { -25, 32 },
  { 8, 10 },
  { 15, 22 },
  { -26, 35 },
  { 16, 22 },
  { -21, 37 },
  { -27, 38 },
  { -28, 39 },
  { 19, 22 },
  { -29, 41 },
  { -31, 42 },
  { -32, 43 },
  { -33, 44 },
  { -34, 45 },
  { -35, 46 },
  { 26, 37 },
  { -36, 48 },
  { 29, 37 },
  { 48, 29 },
  { 30, 37 },
  { -38, 52 },
  { -30, 53 },
  { -37, 54 },
  { 32, 37 },
  { -41, 56 },
  { -42, 57 },
  { -40, 58 },
  { -43, 59 },
  { 35, 37 },
  { 42, 53 },
  { 52, 54 },
  { 43, 53 },
  { -45, 64 },
  { 44, 53 },
  { -44, 66 },
  { -47, 67 },
  { -46, 68 },
  { -48, 69 },
  { 56, 58 },
  { 45, 53 },
  { 46, 53 },
  { -49, 73 },
  { -50, 74 },
  { -51, 75 },
  { 57, 58 },
  { -53, 77 },
  { -54, 78 },
  { -52, 79 },
  { -55, 80 },
  { 80, 60 },
  { -57, 82 },
  { -58, 83 },
  { 64, 66 },
  { -56, 85 },
  { -59, 86 },
  { -61, 87 },
  { 67, 68 },
  { -62, 89 },
  { -63, 90 },
  { 77, 79 },
  { -64, 92 },
  { 82, 85 },
  { -65, 94 },
  { -60, 95 },
  { -68, 96 },
  { 78, 79 },
  { -67, 98 },
  { -69, 99 },
  { -70, 100 },
  { -71, 101 },
  { -73, 102 },
  { 83, 85 },
  { -74, 104 },
  { -72, 105 },
  { -76, 106 },
  { 87, 95 },
  { 89, 95 },
  { 90, 95 },
  { -77, 110 },
  { -39, 111 },
  { -79, 112 },
  { 92, 95 },
  { 58, 111 },
  { 102, 105 },
  { 96, 98 },
  { 59, 111 },
  { 94, 95 },
  { 66, 111 },
  { -75, 120 },
  { 68, 111 },
  { 69, 111 },
  { 73, 111 },
  { 74, 111 },
  { 75, 111 },
  { -80, 126 },
  { 79, 111 },
  { 60, 111 },
  { -66, 129 },
  { -81, 130 },
  { 85, 111 },
  { 106, 120 },
  { -78, 133 },
  { 86, 111 },
  { -83, 135 },
  { -82, 136 },
  { 98, 129 },
  { 110, 120 },
  { 99, 129 },
  { -85, 140 },
  { 112, 133 },
  { 100, 129 },
  { -86, 143 },
  { -84, 144 },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { 101, 129 },
  { 105, 129 },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { 126, 133 },
  { 104, 129 },
  { 95, 111 },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { 140, 144 },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { 135, 136 },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { 143, 144 },
  { 2, 161 },
  { 5, 161 },
  { 10, 161 },
  { -32768L, -32768L },
  { 13, 161 },
  { 22, 161 },
  { 21, 161 },
  { -32768L, -32768L },
  { 24, 161 },
  { 37, 161 },
  { 38, 161 },
  { 39, 161 },
  { 41, 161 },
  { -32768L, -32768L },
  { 53, 161 },
  { 29, 161 },
  { 54, 161 },
  { 111, 161 },
  { 129, 161 },
  { -32768L, -32768L },
  { 120, 161 },
  { 133, 161 },
  { 130, 161 },
  { -32768L, -32768L },
  { 136, 161 },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { -32768L, -32768L },
  { 144, 161 }
};

};

/* End. */
